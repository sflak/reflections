What happens when you initialize a repository? Why do you need to do it?

* When you initialize a repository, it creates a new .git folder which contains meta-data about that directory. To do it, navigate into your derictory, and run git init.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

* The staging area allows the user to define exactly what files they want to put in the commit. You cant work on these files, like you can from the working directory, and the aren't part of the repo yet since you haven't commited them. This intermediary stage helps the user to create logical commits. 

How can you use the staging area to make sure you have one commit per logical
change?

* Since the files from the most recent commit are in the staging area, you can use git diff to see the differences in your modified files, and the files from the most recent commit. This way, you can see what you changed. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

* If you wanted to make changes to your code, but don't consider those changes to be part development to the core project, a branch would be the perfect solution. Examples of this might be experimenting with a new feature, or creating a different game mode. Branches can help keep these changes seperated from the main project, but still logically organized.

How do the diagrams help you visualize the branch structure?

* The diagrams can help you visualize which commits you can access from which branches, and you can see where your commit will be depending on what branch you're on.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

* Merging branches combines the changes from each branch into one branch. We represent it in the diagram that way because now the commits from both branches are reachable from the new head. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

* With git's automatic merging, you can be sure that whenever something merges automatically, there are no conflicts, and the code should run as expected. When a conflict does arise, git shows you the conflict, and lets you resolve it manually before commiting the merge. 
